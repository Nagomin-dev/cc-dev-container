name: Advanced Bot Comment Notification

# このワークフローはSlack Bot Tokenを使用して複数チャンネルへの通知を実現します
# 必要なセットアップ:
# 1. Slack Appを作成し、chat:write, chat:write.publicスコープを付与
# 2. Bot User OAuth TokenをGitHub Secretsに SLACK_BOT_TOKEN として保存
# 3. チャンネルIDを確認（例: C1234567890）

on:
  issue_comment:
    types: [created]

permissions:
  contents: read
  issues: read
  pull-requests: read

env:
  # フィルタリング設定（環境変数で管理）
  NOTIFY_KEYWORDS: "review,approved,changes requested,vulnerability,error,warning,bug,security"
  IGNORE_KEYWORDS: "WIP,draft,test"
  NOTIFY_CODERABBIT: "true"
  NOTIFY_CLAUDE: "true"
  NOTIFY_OTHER_BOTS: "false"

jobs:
  notify-slack:
    runs-on: ubuntu-latest

    steps:
      - name: Check if should notify
        id: should-notify
        env:
          COMMENT_BODY: ${{ github.event.comment.body }}
        run: |
          set -euo pipefail
          # デフォルトは通知しない
          echo "should_notify=false" >> $GITHUB_OUTPUT

          # ボットかどうかチェック
          USER_LOGIN="${{ github.event.comment.user.login }}"
          IS_BOT=false
          BOT_TYPE=""

          # CodeRabbitチェック
          if [[ "$USER_LOGIN" =~ coderabbit ]]; then
            IS_BOT=true
            BOT_TYPE="coderabbit"
            if [[ "${{ env.NOTIFY_CODERABBIT }}" == "true" ]]; then
              echo "should_notify=true" >> $GITHUB_OUTPUT
            fi
          # GitHub Actions bot（Claude Code Action含む）チェック
          elif [[ "$USER_LOGIN" == "github-actions[bot]" ]]; then
            IS_BOT=true
            # Claude Code Actionかどうかをコメント内容から判定
            if echo "$COMMENT_BODY" | grep -qiE "(Claude|Anthropic|claude-code-action|Claude Code)"; then
              BOT_TYPE="claude"
              if [[ "${{ env.NOTIFY_CLAUDE }}" == "true" ]]; then
                echo "should_notify=true" >> $GITHUB_OUTPUT
              fi
            else
              BOT_TYPE="other"
              if [[ "${{ env.NOTIFY_OTHER_BOTS }}" == "true" ]]; then
                echo "should_notify=true" >> $GITHUB_OUTPUT
              fi
            fi
          fi

          echo "is_bot=$IS_BOT" >> $GITHUB_OUTPUT
          echo "bot_type=$BOT_TYPE" >> $GITHUB_OUTPUT

          # ボットでない場合は処理終了
          if [[ "$IS_BOT" != "true" ]]; then
            exit 0
          fi

          # キーワードフィルタリング
          # 無視キーワードチェック
          if [[ -n "${{ env.IGNORE_KEYWORDS }}" ]]; then
            IFS=',' read -ra IGNORE_ARRAY <<< "${{ env.IGNORE_KEYWORDS }}"
            for keyword in "${IGNORE_ARRAY[@]}"; do
              if echo "$COMMENT_BODY" | grep -qi "$keyword"; then
                echo "should_notify=false" >> $GITHUB_OUTPUT
                echo "Ignored due to keyword: $keyword"
                exit 0
              fi
            done
          fi

          # 通知キーワードチェック（指定されている場合）
          if [[ -n "${{ env.NOTIFY_KEYWORDS }}" ]]; then
            FOUND_KEYWORD=false
            IFS=',' read -ra NOTIFY_ARRAY <<< "${{ env.NOTIFY_KEYWORDS }}"
            for keyword in "${NOTIFY_ARRAY[@]}"; do
              if echo "$COMMENT_BODY" | grep -qi "$keyword"; then
                FOUND_KEYWORD=true
                echo "matched_keyword=$keyword" >> $GITHUB_OUTPUT
                break
              fi
            done

            # キーワードが見つからなかった場合は通知しない
            if [[ "$FOUND_KEYWORD" != "true" ]]; then
              echo "should_notify=false" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Set bot info
        if: steps.should-notify.outputs.should_notify == 'true'
        id: bot-info
        run: |
          set -euo pipefail
          BOT_TYPE="${{ steps.should-notify.outputs.bot_type }}"

          case "$BOT_TYPE" in
            "coderabbit")
              echo "bot_name=CodeRabbit" >> $GITHUB_OUTPUT
              echo "bot_icon=🐰" >> $GITHUB_OUTPUT
              echo "bot_color=#FF6B6B" >> $GITHUB_OUTPUT
              ;;
            "claude")
              echo "bot_name=Claude Code Action" >> $GITHUB_OUTPUT
              echo "bot_icon=🤖" >> $GITHUB_OUTPUT
              echo "bot_color=#6366F1" >> $GITHUB_OUTPUT
              ;;
            *)
              echo "bot_name=GitHub Actions Bot" >> $GITHUB_OUTPUT
              echo "bot_icon=⚙️" >> $GITHUB_OUTPUT
              echo "bot_color=#808080" >> $GITHUB_OUTPUT
              ;;
          esac

      - name: Analyze comment content
        if: steps.should-notify.outputs.should_notify == 'true'
        id: comment-analysis
        env:
          COMMENT_BODY: ${{ github.event.comment.body }}
        run: |
          set -euo pipefail
          # コメントの重要度を判定
          IMPORTANCE="normal"
          if echo "$COMMENT_BODY" | grep -qiE "(error|failed|failure|bug|vulnerability|security)"; then
            IMPORTANCE="high"
          elif echo "$COMMENT_BODY" | grep -qiE "(approved|lgtm|success|passed)"; then
            IMPORTANCE="success"
          elif echo "$COMMENT_BODY" | grep -qiE "(warning|suggestion|consider)"; then
            IMPORTANCE="warning"
          fi

          echo "importance=$IMPORTANCE" >> $GITHUB_OUTPUT

          # 重要度に応じた絵文字とメンション設定
          case "$IMPORTANCE" in
            "high")
              echo "importance_icon=🚨" >> $GITHUB_OUTPUT
              echo "mention=<!channel>" >> $GITHUB_OUTPUT
              ;;
            "success")
              echo "importance_icon=✅" >> $GITHUB_OUTPUT
              echo "mention=" >> $GITHUB_OUTPUT
              ;;
            "warning")
              echo "importance_icon=⚠️" >> $GITHUB_OUTPUT
              echo "mention=" >> $GITHUB_OUTPUT
              ;;
            *)
              echo "importance_icon=📝" >> $GITHUB_OUTPUT
              echo "mention=" >> $GITHUB_OUTPUT
              ;;
          esac

          # コメントプレビュー作成
          PREVIEW=$(echo "$COMMENT_BODY" | tr '\n' ' ' | cut -c1-500)
          if [ ${#COMMENT_BODY} -gt 500 ]; then
            PREVIEW="${PREVIEW}..."
          fi
          echo "preview<<EOF" >> $GITHUB_OUTPUT
          echo "$PREVIEW" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Set Slack channel
        if: steps.should-notify.outputs.should_notify == 'true'
        id: slack-channel
        run: |
          set -euo pipefail
          # ブランチやラベルに基づいてチャンネルを決定
          # Bot Token方式ではチャンネルIDを使用（GitHub Variablesで管理）
          CHANNEL="${{ vars.SLACK_CHANNEL_GITHUB_NOTIFICATIONS }}"

          # チャンネルIDの検証
          if [[ -z "$CHANNEL" ]]; then
            echo "❌ エラー: SLACK_CHANNEL_GITHUB_NOTIFICATIONS が設定されていません"
            echo "📋 GitHub Variables で以下を設定してください:"
            echo "  - SLACK_CHANNEL_GITHUB_NOTIFICATIONS (通常の通知用)"
            echo "  - SLACK_CHANNEL_PRODUCTION_ALERTS (本番環境向け通知用、オプション)"
            exit 1
          fi

          # PRの場合、GitHub APIを使用してベースブランチを取得
          if [[ -n "${{ github.event.issue.pull_request.url || '' }}" ]]; then
            PR_URL="${{ github.event.issue.pull_request.url }}"
            echo "Fetching PR details from: $PR_URL"

            # GitHub APIでPR情報を取得（エラーハンドリング付き）
            if ! PR_DATA=$(curl -s -w "%{http_code}" -H "Authorization: Bearer ${{ github.token }}" \
                                -H "Accept: application/vnd.github.v3+json" \
                                "$PR_URL"); then
              echo "❌ GitHub API呼び出しに失敗しました"
              echo "⚠️  デフォルトチャンネルを使用します"
            else
              HTTP_CODE="${PR_DATA: -3}"
              PR_DATA="${PR_DATA%???}"

              if [[ "$HTTP_CODE" != "200" ]]; then
                echo "❌ GitHub API エラー (HTTP $HTTP_CODE)"
                echo "⚠️  デフォルトチャンネルを使用します"
              else
                # ベースブランチを抽出（jqエラーハンドリング付き）
                if BASE_REF=$(echo "$PR_DATA" | jq -r '.base.ref // empty' 2>/dev/null) && [[ -n "$BASE_REF" ]]; then
                  echo "✅ Base branch detected: $BASE_REF"
                else
                  echo "⚠️  ベースブランチの取得に失敗、デフォルトチャンネルを使用"
                  BASE_REF=""
                fi
              fi
            fi

            if [[ "$BASE_REF" == "main" ]]; then
              PROD_CHANNEL="${{ vars.SLACK_CHANNEL_PRODUCTION_ALERTS }}"
              if [[ -n "$PROD_CHANNEL" ]]; then
                CHANNEL="$PROD_CHANNEL"
                echo "📢 Production alert channel selected: $CHANNEL"
              else
                echo "⚠️  警告: SLACK_CHANNEL_PRODUCTION_ALERTS が未設定のため、デフォルトチャンネルを使用"
              fi
            fi
          fi

          # ラベルの確認（jqを使用）
          LABELS=$(jq -r '.issue.labels[]?.name // empty' "$GITHUB_EVENT_PATH" 2>/dev/null | tr '\n' ' ' || echo "")
          echo "Labels detected: $LABELS"

          # ラベルベースのチャンネル振り分け
          if [[ "$LABELS" =~ "urgent" ]]; then
            URGENT_CHANNEL="${{ vars.SLACK_CHANNEL_URGENT_NOTIFICATIONS }}"
            if [[ -n "$URGENT_CHANNEL" ]]; then
              CHANNEL="$URGENT_CHANNEL"
              echo "🚨 Urgent channel selected: $CHANNEL"
            else
              echo "⚠️  SLACK_CHANNEL_URGENT_NOTIFICATIONS が未設定のため、デフォルトチャンネルを使用"
            fi
          elif [[ "$LABELS" =~ "security" ]]; then
            SECURITY_CHANNEL="${{ vars.SLACK_CHANNEL_SECURITY_ALERTS }}"
            if [[ -n "$SECURITY_CHANNEL" ]]; then
              CHANNEL="$SECURITY_CHANNEL"
              echo "🔒 Security channel selected: $CHANNEL"
            else
              echo "⚠️  SLACK_CHANNEL_SECURITY_ALERTS が未設定のため、デフォルトチャンネルを使用"
            fi
          fi

          echo "channel=$CHANNEL" >> $GITHUB_OUTPUT

      - name: Send Slack notification
        if: steps.should-notify.outputs.should_notify == 'true'
        uses: slackapi/slack-github-action@v1.26.0
        with:
          # Bot Token方式でチャンネルを動的に指定
          channel-id: ${{ steps.slack-channel.outputs.channel }}
          payload: |
            {
              "text": "${{ steps.comment-analysis.outputs.importance_icon }} ${{ steps.bot-info.outputs.bot_icon }} ${{ steps.bot-info.outputs.bot_name }} commented on ${{ github.event.issue.pull_request && 'PR' || 'Issue' }} #${{ github.event.issue.number }} ${{ steps.comment-analysis.outputs.mention }}",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*${{ steps.comment-analysis.outputs.importance_icon }} ${{ steps.bot-info.outputs.bot_icon }} ${{ steps.bot-info.outputs.bot_name }} がコメントしました* ${{ steps.comment-analysis.outputs.mention }}"
                  }
                },
                {
                  "type": "context",
                  "elements": [
                    {
                      "type": "mrkdwn",
                      "text": "重要度: ${{ steps.comment-analysis.outputs.importance }} | キーワード: ${{ steps.should-notify.outputs.matched_keyword || 'なし' }}"
                    }
                  ]
                },
                {
                  "type": "divider"
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*リポジトリ:*\n`${{ github.repository }}`"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*${{ github.event.issue.pull_request && 'プルリクエスト' || 'イシュー' }}:*\n<${{ github.event.issue.html_url }}|#${{ github.event.issue.number }}>"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*タイトル:*\n${{ github.event.issue.title }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*作成者:*\n${{ github.event.issue.user.login }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*ボット:*\n`${{ github.event.comment.user.login }}`"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*日時:*\n<!date^${{ github.event.comment.created_at }}^{date_short_pretty} {time}|${{ github.event.comment.created_at }}>"
                    }
                  ]
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*コメント内容:*\n```${{ steps.comment-analysis.outputs.preview }}```"
                  }
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "コメントを見る 👀",
                        "emoji": true
                      },
                      "url": "${{ github.event.comment.html_url }}",
                      "style": "primary"
                    },
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "${{ github.event.issue.pull_request && 'PR' || 'Issue' }}を開く 📄",
                        "emoji": true
                      },
                      "url": "${{ github.event.issue.html_url }}"
                    },
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "リポジトリ 📁",
                        "emoji": true
                      },
                      "url": "${{ github.event.repository.html_url }}"
                    }
                  ]
                }
              ],
              "attachments": [
                {
                  "color": "${{ steps.bot-info.outputs.bot_color }}",
                  "footer": "GitHub Bot Comment Notifier",
                  "footer_icon": "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png",
                  "ts": "${{ github.event.comment.created_at }}"
                }
              ]
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
